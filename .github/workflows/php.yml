name: CI/CD - Build and Deploy

on:
  push:
    branches: [ "main" ]
    paths:
      - 'app/**'
      - 'modules/**'
      - 'Dockerfile'
      - 'docker-compose.yml'
      - 'composer.json'
      - 'composer.lock'
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

env:
  IMAGE_TAG: phpcodeigniter:latest

jobs:
  deploy:
    name: Build & Deploy (Swarm)
    runs-on: self-hosted

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image
        run: |
          docker build --pull -t ${{ env.IMAGE_TAG }} .

      - name: Ensure Docker Swarm is active
        shell: bash
        run: |
          if ! docker info 2>/dev/null | grep -q "Swarm: active"; then
            docker swarm init
          fi

      - name: Ensure external overlay network labnet exists
        shell: bash
        run: |
          if ! docker network inspect labnet >/dev/null 2>&1; then
            echo "Creating overlay network: labnet"
            docker network create -d overlay --attachable labnet
          else
            echo "Overlay network 'labnet' already exists"
          fi
          echo "Networks snapshot:" && docker network ls | grep -E "labnet|phpcodeigniter|INGRESS|ingress" || true

      - name: Stop and remove existing stack (zero-downtime not required)
        shell: bash
        run: |
          if docker stack ls | grep -q "^phpcodeigniter\b"; then
            echo "Removing existing stack phpcodeigniter..."
            docker stack rm phpcodeigniter
            # Aguarda remoção completa do stack (services/networks)
            for i in {1..60}; do
              docker stack ls | grep -q "^phpcodeigniter\b" || break
              echo "Waiting stack removal... $i"; sleep 2
            done
            # Aguarda remoção completa das redes do stack
            echo "Waiting for network cleanup..."
            for i in {1..30}; do
              if ! docker network ls | grep -q "phpcodeigniter_internal_net"; then
                echo "Network cleanup complete"; break
              fi
              echo "Waiting network cleanup... $i"; sleep 2
            done
          else
            echo "No existing stack named phpcodeigniter."
          fi

      - name: Ensure internal networks are ready
        shell: bash
        run: |
          echo "Pre-creating internal networks if needed..."
          # Verificar se a rede interna existe, se não criar
          if ! docker network inspect phpcodeigniter_internal_net >/dev/null 2>&1; then
            echo "Creating overlay network: phpcodeigniter_internal_net"
            docker network create -d overlay --attachable phpcodeigniter_internal_net
          else
            echo "Network 'phpcodeigniter_internal_net' already exists"
          fi
          echo "Networks ready:" && docker network ls | grep -E "phpcodeigniter|labnet" || true

      - name: Deploy stack
        shell: bash
        run: |
          echo "Deploying stack with retry mechanism..."
          for attempt in {1..3}; do
            echo "Deploy attempt $attempt/3"
            if docker stack deploy -c docker-compose.yml phpcodeigniter --with-registry-auth; then
              echo "Stack deployed successfully on attempt $attempt"
              break
            else
              echo "Deploy failed on attempt $attempt"
              if [ $attempt -eq 3 ]; then
                echo "All deploy attempts failed"
                exit 1
              fi
              echo "Waiting 10 seconds before retry..."
              sleep 10
              # Limpar possíveis recursos órfãos
              docker system prune -f --filter "label=com.docker.stack.namespace=phpcodeigniter" || true
            fi
          done

      - name: Verify services
        shell: bash
        run: |
          docker stack ls
          docker stack services phpcodeigniter || true
          echo "Service tasks:" && docker service ps phpcodeigniter_app --no-trunc || true

      - name: Cleanup unused images
        shell: bash
        run: |
          echo "Pruning dangling images..."
          docker image prune -f
          echo "Optionally prune all unused images (commented by default)"
          echo "# docker image prune -a -f"

      - name: Wait for MariaDB to be ready
        shell: bash
        run: |
          echo "Waiting for MariaDB service to be ready..."
          for i in {1..60}; do
            if docker service ps phpcodeigniter_mariadb --format '{{.CurrentState}}' | grep -qi running; then
              break
            fi
            echo "MariaDB not ready yet ($i)..."; sleep 2
          done

      - name: Wait for App container
        shell: bash
        run: |
          echo "Waiting for an app container to be running..."
          for i in {1..60}; do
            CID=$(docker ps --filter "name=phpcodeigniter_app" --format "{{.ID}}" | head -n 1)
            if [ -n "$CID" ]; then
              echo "Found app container: $CID"; echo "$CID" > app_cid.txt; break
            fi
            echo "App container not ready yet ($i)..."; sleep 2
          done
          test -s app_cid.txt || { echo "App container not found"; docker service ps phpcodeigniter_app; exit 1; }

      - name: Run migrations and seed (Shield)
        shell: bash
        run: |
          CID=$(cat app_cid.txt)
          echo "Testing database connection..."
          for i in {1..30}; do
            if docker exec "$CID" php -r "mysqli_connect('mariadb','ciuser','cipass','codeigniter',3306) or exit(1);"; then
              echo "Database is ready"; break
            fi
            echo "Database not ready yet ($i)..."; sleep 2
          done
          echo "Running migrations in container $CID"
          docker exec -w /var/www/html "$CID" php spark migrate --all
          echo "Seeding AdminUserSeeder"
          docker exec -w /var/www/html "$CID" php spark db:seed AdminUserSeeder

