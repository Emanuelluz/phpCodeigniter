name: CI/CD - Build and Deploy

on:
  push:
    branches: [ "main" ]
    paths:
      - 'app/**'
      - 'modules/**'
      - 'Dockerfile'
      - 'docker-compose.yml'
      - 'composer.json'
      - 'composer.lock'
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

env:
  IMAGE_TAG: phpcodeigniter:latest

jobs:
  deploy:
    name: Build & Deploy (Swarm)
    runs-on: self-hosted

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image
        run: |
          docker build --pull -t ${{ env.IMAGE_TAG }} .

      - name: Ensure Docker Swarm is active
        shell: bash
        run: |
          if ! docker info 2>/dev/null | grep -q "Swarm: active"; then
            docker swarm init
          fi

      - name: Stop and remove existing stack (zero-downtime not required)
        shell: bash
        run: |
          if docker stack ls | grep -q "^phpcodeigniter\b"; then
            echo "Removing existing stack phpcodeigniter..."
            docker stack rm phpcodeigniter
            # Aguarda remoção completa do stack (services/networks)
            for i in {1..60}; do
              docker stack ls | grep -q "^phpcodeigniter\b" || break
              echo "Waiting stack removal... $i"; sleep 2
            done
          else
            echo "No existing stack named phpcodeigniter."
          fi

      - name: Deploy stack
        run: |
          docker stack deploy -c docker-compose.yml phpcodeigniter --with-registry-auth

      - name: Verify services
        shell: bash
        run: |
          docker stack ls
          docker stack services phpcodeigniter || true
          echo "Service tasks:" && docker service ps phpcodeigniter_app --no-trunc || true

      - name: Cleanup unused images
        shell: bash
        run: |
          echo "Pruning dangling images..."
          docker image prune -f
          echo "Optionally prune all unused images (commented by default)"
          echo "# docker image prune -a -f"

